---
name: Schema Validation

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  validate-schema:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install
        npm install ajv ajv-formats js-yaml
        
    - name: Validate schema itself
      run: |
        echo "Validating RTM schema against JSON Schema meta-schema..."
        node validate-schema.js compile schema/rtm-schema.json
        
    - name: Validate modified RTM files
      run: |
        echo "Checking for modified RTM files..."
        
        # Ëé∑Âèñ‰øÆÊîπÁöÑÊñá‰ª∂ÂàóË°®ÔºàÁõ∏ÂØπ‰∫é main ÂàÜÊîØÔºâ
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # PR ÊÉÖÂÜµÔºö‰∏é target branch ÊØîËæÉ
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
        else
          # Push ÊÉÖÂÜµÔºö‰∏éÂâç‰∏Ä‰∏™ commit ÊØîËæÉ
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
        fi
        
        echo "All changed files:"
        echo "$CHANGED_FILES"
        
        # ËøáÊª§Âá∫ rtm Êñá‰ª∂Â§π‰∏≠ÁöÑ yaml, yml, json Êñá‰ª∂
        RTM_FILES=$(echo "$CHANGED_FILES" | grep -E '^rtm/.*\.(yaml|yml|json)$' || true)
        
        if [ -z "$RTM_FILES" ]; then
          echo "No RTM files (.yaml/.yml/.json) were modified in ./rtm folder, skipping validation"
        else
          echo "Found modified RTM files:"
          echo "$RTM_FILES"
          echo ""
          
          # È™åËØÅÊØè‰∏™‰øÆÊîπÁöÑÊñá‰ª∂
          echo "$RTM_FILES" | while read file; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              node validate-schema.js validate schema/rtm-schema.json "$file"
            else
              echo "File $file was deleted, skipping validation"
            fi
          done
        fi   
        
    - name: Generate validation report
      run: |
        echo "## Validation Report" > validation-report.md
        echo "" >> validation-report.md
        echo "### Schema Validation: ‚úÖ PASSED" >> validation-report.md
        echo "### Example Files:" >> validation-report.md
        
        # ÁªüËÆ°‰øÆÊîπÁöÑ RTM Êñá‰ª∂
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
        fi

        RTM_FILES=$(echo "$CHANGED_FILES" | grep -E '^rtm/.*\.(yaml|yml|json)$' || true)
        RTM_COUNT=$(echo "$RTM_FILES" | grep -v '^$' | wc -l)

        echo "- Modified RTM files validated: $RTM_COUNT files ‚úÖ" >> validation-report.md
        
        echo "" >> validation-report.md
        echo "All validations completed successfully! üéâ" >> validation-report.md
        
        cat validation-report.md
        
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md

  lint-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install yamllint
      run: pip install yamllint
      
    - name: Create yamllint config
      run: |
        cat > .yamllint.yml << 'EOF'
        extends: default
        rules:
          line-length:
            max: 120
          indentation:
            spaces: 2
          comments:
            min-spaces-from-content: 1
        EOF
        
    - name: Lint YAML files
      run: |
        echo "Linting all YAML files..."
        find . -name "*.yaml" -o -name "*.yml" | grep -v node_modules | while read file; do
          echo "Linting $file"
          yamllint "$file" || true
        done

  check-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js  
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install markdown-link-check
      run: npm install -g markdown-link-check
      
    - name: Create link-check config
      run: |
        cat > .markdown-link-check.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^https://github.com/yourusername"
            },
            {
              "pattern": "^mailto:"
            }
          ],
          "timeout": "20s",
          "retryOn429": true,
          "retryCount": 2,
          "fallbackRetryDelay": "30s",
          "aliveStatusCodes": [200, 206]
        }
        EOF
      
    - name: Check links in documentation
      run: |
        echo "Checking links in documentation..."
        find . -name "*.md" | while read file; do
          echo "Checking links in $file"
          markdown-link-check "$file" --config .markdown-link-check.json || true
        done

  validate-examples-cross-platform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        validator: ['ajv-cli', 'jsonschema']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install validators
      run: |
        if [ "${{ matrix.validator }}" = "ajv-cli" ]; then
          npm install -g ajv-cli ajv-formats js-yaml
        elif [ "${{ matrix.validator }}" = "jsonschema" ]; then
          pip install jsonschema pyyaml
        fi
        
    - name: Validate with ${{ matrix.validator }}
      run: |  # <--- The pipe character indicates a multi-line script
        if [ "${{ matrix.validator }}" = "ajv-cli" ]; then
          if ls examples/*.yaml 1> /dev/null 2>&1; then # Check if any yaml files exist
            find examples -name "*.yaml" -o -name "*.yml" | while read file; do # Also find .yml
              echo "Validating $file with Node.js ajv-cli"
              node validate-schema.js validate schema/rtm-schema.json "$file"
            done
          else
            echo "No example files found for ajv-cli validation"
          fi
        elif [ "${{ matrix.validator }}" = "jsonschema" ]; then
          # Ensure the 'cat' command itself is properly indented
          # And the content being fed to 'cat' (the Python script) is also properly indented
          # relative to the 'run: |' line.
          # The Python script content itself does not need further YAML indentation,
          # as it's treated as a literal block by 'cat << EOF'.
          cat > validate_with_jsonschema.py << 'EOF'
        import json
        import yaml
        import jsonschema
        import glob
        import sys
        import os

        SCHEMA_FILE = 'schema/rtm-schema.json'
        EXAMPLES_GLOB = 'examples/**/*.yaml' # Consider adding '*.yml' if needed, e.g. 'examples/**/*.{yaml,yml}'
        ALL_VALID = True # Flag to track overall validation status

        print(f"--- Starting Python jsonschema validation ---")
        print(f"Schema file: {SCHEMA_FILE}")
        print(f"Examples glob: {EXAMPLES_GLOB}")

        if not os.path.exists(SCHEMA_FILE):
            print(f'‚ùå Schema file not found: {SCHEMA_FILE}')
            sys.exit(1)

        try:
            with open(SCHEMA_FILE, 'r', encoding='utf-8') as f:
                schema = json.load(f)
        except json.JSONDecodeError as e:
            print(f"‚ùå Error decoding schema JSON from {SCHEMA_FILE}: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Unexpected error loading schema {SCHEMA_FILE}: {e}")
            sys.exit(1)

        yaml_files = glob.glob(EXAMPLES_GLOB, recursive=True)
        # Also find .yml files if your examples might use that extension
        # yaml_files.extend(glob.glob('examples/**/*.yml', recursive=True))
        # yaml_files = list(set(yaml_files)) # Remove duplicates if any

        if not yaml_files:
            print('‚ö†Ô∏è No YAML/YML files found in examples directory matching the pattern. Validation skipped.')
            # Depending on requirements, you might want to exit 0 or 1 here.
            # If examples are mandatory, this should be an error.
            # sys.exit(0) # Exiting 0 if no files is acceptable.
            sys.exit(0) 


        print(f"Found {len(yaml_files)} example file(s) to validate.")

        for yaml_file in yaml_files:
            print(f'---> Validating {yaml_file} with jsonschema (Python)')
            try:
                with open(yaml_file, 'r', encoding='utf-8') as f:
                    data = yaml.safe_load(f)
                jsonschema.validate(instance=data, schema=schema)
                print(f'‚úÖ {yaml_file} is valid')
            except FileNotFoundError: # Should ideally not happen if glob worked
                print(f"‚ùå File not found during iteration: {yaml_file}")
                ALL_VALID = False
            except yaml.YAMLError as e:
                print(f"‚ùå Error parsing YAML from {yaml_file}: {e}")
                ALL_VALID = False
            except jsonschema.exceptions.ValidationError as e:
                print(f'‚ùå {yaml_file} is invalid:')
                print(f"    Error: {e.message}")
                print(f"    Path: {list(e.path)}")
                ALL_VALID = False
            except Exception as e:
                print(f'‚ùå An unexpected error occurred validating {yaml_file}: {e}')
                ALL_VALID = False

        if not ALL_VALID:
            print("--- ‚ùå Some Python jsonschema validations FAILED ---")
            sys.exit(1)
        else:
            print("--- ‚úÖ All Python jsonschema validations PASSED ---")
            sys.exit(0)
        EOF
          # Ensure python3 is used if python might point to python2 in some environments
          python3 validate_with_jsonschema.py 
        fi